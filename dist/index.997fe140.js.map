{"mappings":"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","sources":["public/components/navmenu.js","public/components/musicplayer.js","public/tasklist.js"],"sourcesContent":["/*javascript for the nav bar to be able to activate. Code from https://codepen.io/robdongas/pen/MWvKMRp*/\r\nconst toggler = document.querySelector('.menu-toggle');\r\nconst menu = document.querySelector('.menu');\r\n\r\n/*\r\n * Toggles on and off the 'active' class on the menu\r\n * and the toggler button.\r\n */\r\ntoggler.addEventListener('click', () => {\r\n  toggler.classList.toggle('active');\r\n  menu.classList.toggle('active');\r\n})","/*javascript for music player*/\r\n\r\n/*code modified from https://codepen.io/ozzie/pen/YPOBEJ*/\r\n\r\n//counts number of songs on the page\r\nvar numSongs = document.querySelectorAll(\"audio\").length;\r\n\r\nvar songIndex = 1;\r\n\r\nvar music = document.getElementById(\"song\" + songIndex);\r\nvar playButton = document.getElementById(\"play\");\r\nvar pauseButton = document.getElementById(\"pause\");\r\nvar playhead = document.getElementById(\"elapsed\");\r\nvar timeline = document.getElementById(\"slider\");\r\nvar timer = document.getElementById(\"timer\");\r\nvar duration = music.duration;\r\nvar volumeSlider = document.getElementById(\"volume\");\r\nvar prevSong = document.getElementById(\"prevSong\");\r\nvar nextSong = document.getElementById(\"nextSong\");\r\npauseButton.style.display = \"none\";\r\n\r\n//runs the timeupdate function whenever the music is updated\r\nmusic.addEventListener(\"timeupdate\", timeUpdate, false);\r\n\r\n//updates the timer and timeline when music is playinh\r\nfunction timeUpdate() {\r\n\r\n  //grabs percentage of song that has been played\r\n\tvar playPercent = (music.currentTime / duration) * 100;\r\n\r\n  //sets the width of the line that shows how much has been played based on percentage\r\n\tplayhead.style.width = ((playPercent * 0.01) * timeline.offsetWidth) + \"px\";\r\n\r\n  //checks how many minutes and seconds have been played\r\n\tvar secondsIn = Math.floor(music.currentTime%60);\r\n  var minutesIn = Math.floor(music.currentTime/60);\r\n\r\n  //updates the little timer underneath the bar based on how much of the song has been played\r\n\ttimer.innerHTML = String(minutesIn).padStart(2, \"0\") + \":\" + String(secondsIn).padStart(2, \"0\");\r\n\r\n  \r\n}\r\n\r\n//hides play button and shows pause button when play button is clicked\r\nplayButton.onclick = function() {\r\n\tmusic.play();\r\n\tplayButton.style.display = \"none\";\r\n\tpause.style.display = \"initial\";\r\n}\r\n\r\n//hides pause button and shows play button when pause button is clicked\r\npauseButton.onclick = function() {\r\n\tmusic.pause();\r\n\tplayButton.style.display = \"initial\";\r\n\tpause.style.display = \"none\";\r\n}\r\n\r\n\r\nmusic.addEventListener(\"canplaythrough\", function () {\r\n\tduration = music.duration;\r\n}, false);\r\n\r\n\r\n//volume slider javascript. ccode from https://stackoverflow.com/questions/62160275/js-audio-volume-slider\r\nvolumeSlider.addEventListener(\"change\", function(e){\r\n  music.volume = e.currentTarget.value/100;\r\n})","import \"./components/navmenu.js\";\r\nimport \"./components/musicplayer.js\";\r\n\r\n\r\n\r\n//Task List js starts here\r\nconst taskForm = document.querySelector(\".newTaskForm\");\r\nconst taskColumnForm = document.querySelector(\".newTaskColumnForm\");\r\n\r\nvar taskColumnList = document.querySelector(\".taskContent > ul\")\r\nvar tasklist = document.querySelector(\".taskColumn > ul\");\r\n\r\nvar taskNameInput = document.getElementById(\"taskName\");\r\nvar taskDueInput = document.getElementById(\"taskDue\");\r\nvar taskCompInput = document.getElementById(\"taskComp\");\r\nvar taskPriorityInput = document.getElementById(\"taskPriority\");\r\nvar addTaskColumnButton = document.getElementById(\"taskColumnAdd\");\r\n\r\nvar taskListArray = [];\r\nvar taskColumnArray = [];\r\n\r\n//showLocalColumns(); //shows locally stored information on page\r\n\r\n//creates a task column on page at the beginning if taskColumnList doesn't have child nodes\r\n/*if (taskColumnList.childNodes.length == 3){\r\n  addTaskColumn(\"To Do\", \"#ED9D28\");\r\n}*/\r\n\r\n\r\ndocument.getElementById(\"taskColumnAdd\").addEventListener(\"click\", showAddTaskColumnForm);\r\ndocument.getElementById(\"newTaskColumnOut\").addEventListener(\"click\", closeAddTaskColumnForm);\r\ndocument.getElementById(\"taskAdd\").addEventListener(\"click\", showAddTaskForm);\r\ndocument.getElementById(\"newTaskOut\").addEventListener(\"click\", closeAddTaskForm);\r\n\r\n\r\n\r\n//grabs the information from the new task form when user clicks submit button\r\ntaskForm.addEventListener(\"submit\", function(event) {\r\n  event.preventDefault();\r\n  let task = taskNameInput.value;\r\n  let dueDate = taskDueInput.value;\r\n  let estimatedTime = taskCompInput.value;\r\n  let priorityRating = taskPriorityInput.options[taskPriorityInput.selectedIndex].value;\r\n  /* if (task) {\r\n    addTask(task, dueDate, estimatedTime, priorityRating, false);\r\n  } */\r\n  addTask(task, dueDate, estimatedTime, priorityRating, false);\r\n})\r\n\r\ntaskColumnForm.addEventListener(\"submit\", function(event){\r\n  event.preventDefault();\r\n  let columnName = taskColumnName.value;\r\n  let columnColor = colorpicker.value;\r\n  addTaskColumn(columnName, columnColor);\r\n})\r\n\r\nfunction showAddTaskForm() {\r\n  document.querySelector(\".newTaskForm\").style.display = \"initial\";\r\n}\r\n\r\nfunction closeAddTaskForm() {\r\n  document.querySelector(\".newTaskForm\").style.display = \"none\";\r\n}\r\n\r\nfunction showAddTaskColumnForm() {\r\n  document.querySelector(\".newTaskColumnForm\").style.display = \"initial\";\r\n}\r\n\r\nfunction closeAddTaskColumnForm() {\r\n  document.querySelector(\".newTaskColumnForm\").style.display = \"none\";\r\n}\r\n\r\nfunction addTask(taskName, dueDate, estimatedTime, priorityRating, completionStatus) {\r\n  let d = new Date();\r\n  let dateCreated = d.getFullYear();\r\n  let task = {\r\n    id: Date.now(),\r\n    taskName,\r\n    dueDate,\r\n    dateCreated,\r\n    estimatedTime,\r\n    priorityRating,\r\n    completionStatus\r\n  };\r\n  taskListArray.push(task);\r\n  renderTask(task);\r\n}\r\n\r\nfunction addTaskColumn(columnName, columnColor){\r\n  let taskcolumn = {\r\n    id: Date.now(),\r\n    columnName,\r\n    columnColor\r\n  }\r\n  taskColumnArray.push(taskcolumn);\r\n  renderTaskColumn(taskcolumn);\r\n}\r\n\r\nfunction renderTask(task) {\r\n  //create HTML elements\r\n\r\n  //creates task card div\r\n  let taskCard = document.createElement(\"div\"); \r\n  taskCard.setAttribute(\"data-id\", task.id);\r\n  taskCard.classList.add(\"taskCard\");\r\n\r\n  //creates task card title div\r\n  let taskCardTitle = document.createElement(\"div\");\r\n  taskCardTitle.classList.add(\"taskCardTitle\")\r\n  //creates task card header (h3)\r\n  let taskCardHeader = document.createElement(\"h3\");\r\n  taskCardHeader.innerHTML = task.taskName;\r\n  taskCardTitle.appendChild(taskCardHeader); //adds h3 to taskCardTitle div\r\n  taskCard.appendChild(taskCardTitle); //adds taskCardTitle to taskCard div\r\n\r\n  //creates taskCardInfo div\r\n  let taskCardInfo = document.createElement(\"div\");\r\n  taskCardInfo.classList.add(\"taskCardInfo\");\r\n  //creates text for the different task information\r\n  let dueDate = document.createElement(\"p\");\r\n  dueDate.innerHTML = \"Due Date: \" + task.dueDate;\r\n  let priorityRating = document.createElement(\"p\");\r\n\r\n  //javascript for priority\r\n  let priorityColor = document.createElement(\"span\");\r\n  let priorityText = task.priorityRating.substring(0,1).toUpperCase() + task.priorityRating.substring(1); //capitalizes the priority text\r\n  priorityColor.insertAdjacentText(\"afterbegin\", priorityText); //adds text to the span element\r\n  //changes priority text color based on what value it is\r\n  if (task.priorityRating == \"low\"){\r\n    priorityColor.classList.add(\"pLow\");\r\n  }\r\n  if (task.priorityRating == \"medium\"){\r\n    priorityColor.classList.add(\"pMedium\");\r\n  }\r\n  if (task.priorityRating == \"high\"){\r\n    priorityColor.classList.add(\"pHigh\");\r\n  }\r\n  priorityRating.innerHTML = \"Priority Rating: \";\r\n  priorityRating.appendChild(priorityColor);\r\n\r\n  //estimated time javascript\r\n  let estimatedTime = document.createElement(\"p\");\r\n  let totalMinutes = task.estimatedTime;\r\n  let hours = Math.floor(totalMinutes / 60);\r\n  let minutes = totalMinutes % 60;\r\n  estimatedTime.innerHTML = \"Est. Time to Complete: \" + hours + \"H\" + minutes +\"M\";\r\n  \r\n  taskCardInfo.appendChild(dueDate);\r\n  taskCardInfo.appendChild(priorityRating);\r\n  taskCardInfo.appendChild(estimatedTime);\r\n  taskCard.appendChild(taskCardInfo);\r\n\r\n  //creates the icon section of the task card\r\n  let taskCardIcons = document.createElement(\"div\");\r\n  taskCardIcons.classList.add(\"taskCardIcons\");\r\n  //creates a delete button for the task\r\n  let delButton = document.createElement(\"button\");\r\n  let delButtonImg = document.createElement(\"img\"); //creates image in document\r\n  delButtonImg.classList.add(\"icon\"); //adds class \"icon\" to image\r\n  delButtonImg.src = \"images/Trashcan.png\"; //sets image src\r\n  delButtonImg.alt = \"Delete Task Card Icon\";\r\n  delButton.appendChild(delButtonImg); //puts image under the html button container\r\n  taskCardIcons.appendChild(delButton);\r\n  //creates completion buttons for the task\r\n  let compNoButton = document.createElement(\"button\");\r\n  let compNoButtonImg = document.createElement(\"img\");\r\n  compNoButtonImg.classList.add(\"icon\");\r\n  compNoButtonImg.src = \"images/CompNo.png\";\r\n  compNoButtonImg.alt = \"Task Not Completed Icon\";\r\n  compNoButton.appendChild(compNoButtonImg);\r\n  let compYesButton = document.createElement(\"button\");\r\n  let compYesButtonImg = document.createElement(\"img\");\r\n  compYesButtonImg.classList.add(\"icon\");\r\n  compYesButtonImg.src = \"images/CompYes.png\";\r\n  compYesButtonImg.alt = \"Task Completed Icon\";\r\n  compYesButton.appendChild(compYesButtonImg);\r\n  //adds buttons to icon secton div\r\n  taskCardIcons.appendChild(compNoButton);\r\n  taskCardIcons.appendChild(compYesButton);\r\n  taskCard.appendChild(taskCardIcons);\r\n\r\n  //makes compYesButton invisible by default\r\n  compYesButton.style.display = \"none\";\r\n  //Puts the tasklist into the unlisted list in the taskColumn\r\n  tasklist.appendChild(taskCard);\r\n\r\n\r\n  //clears the input form\r\n  taskForm.reset();\r\n  //makes the form disappear from the screen\r\n  taskForm.style.display = \"none\";\r\n\r\n  //writes task object to local storage\r\n  let taskObject = {\r\n    \"id\": task.id,\r\n    \"taskName\": task.taskName,\r\n    \"dueDate\": task.dueDate,\r\n    \"dateCreated\": task.dateCreated,\r\n    \"estimatedTime\": task.estimatedTime,\r\n    \"priorityRating\": task.priorityRating,\r\n    \"completionStatus\": task.completionStatus\r\n  }\r\n\r\n  let tasks;\r\n\r\n  if(localStorage.getItem(\"tasks\") == null){\r\n    tasks = [];\r\n  }\r\n  else{\r\n    tasks = localStorage.getItem(\"tasks\");\r\n    tasks = JSON.parse(tasks);\r\n  }\r\n\r\n  let existingTask = tasks.find(function(task){\r\n    return task.id === tasks.id;\r\n  })\r\n\r\n  if(!existingTask){\r\n    tasks.push(taskObject);\r\n    let taskJSON = JSON.stringify(tasks);\r\n    localStorage.setItem(\"tasks\", taskJSON);\r\n  }\r\n\r\n  \r\n  \r\n  //removes the task when delButton is pressed\r\n  delButton.addEventListener(\"click\", function(event){\r\n    event.preventDefault();\r\n    taskCard.remove();\r\n    localStorage.removeItem(tasks)\r\n  })\r\n\r\n\r\n  /*toggles between compNoButton and compYesButton when you click them*/\r\n  compNoButton.addEventListener(\"click\", function(event){\r\n    event.preventDefault();\r\n    compYesButton.style.display = \"initial\";\r\n    compNoButton.style.display = \"none\";\r\n    task.completionStatus = true;\r\n  })\r\n\r\n  compYesButton.addEventListener(\"click\", function(event){\r\n    event.preventDefault();\r\n    compYesButton.style.display = \"none\";\r\n    compNoButton.style.display = \"initial\";\r\n    task.completionStatus = false;\r\n  })\r\n  \r\n}\r\n\r\nfunction renderTaskColumn(taskcolumn) {\r\n  //creates task column and h2 \r\n  let taskColumn = document.createElement(\"div\");\r\n  taskColumn.classList.add(\"taskColumn\");\r\n  taskColumn.style.minHeight = \"20vh\"; //styles minHeight here so it won't affect other columns\r\n  taskColumn.style.backgroundColor = taskcolumn.columnColor;\r\n  let taskColumnHead = document.createElement(\"h2\");\r\n  taskColumnHead.innerHTML = taskcolumn.columnName;\r\n  taskColumn.appendChild(taskColumnHead);\r\n\r\n  //creates delete task column button\r\n  let taskOutButton = document.createElement(\"button\");\r\n  taskOutButton.classList.add(\"taskOut\");\r\n  let taskOutImg = document.createElement(\"img\");\r\n  taskOutImg.classList.add(\"icon\");\r\n  taskOutImg.src = \"images/Remove.png\";\r\n  taskOutImg.alt = \"Remove Task Column Icon\";\r\n  taskOutButton.appendChild(taskOutImg);\r\n  taskColumn.appendChild(taskOutButton);\r\n\r\n  //creates empty list where task cards go\r\n  let tasks = document.createElement(\"ul\");\r\n  taskColumn.appendChild(tasks);\r\n\r\n  //creates add task button\r\n  let addTaskButton = document.createElement(\"button\");\r\n  addTaskButton.classList.add(\"taskAdd\");\r\n  let addTaskButtonIcon = document.createElement(\"img\");\r\n  addTaskButtonIcon.classList.add(\"icon\");\r\n  addTaskButtonIcon.src = \"images/Add.png\";\r\n  addTaskButtonIcon.alt = \"Add Task Button Icon\"\r\n  addTaskButton.appendChild(addTaskButtonIcon);\r\n  taskColumn.appendChild(addTaskButton);\r\n\r\n  //makes taskColumnForm reset and disappear\r\n  taskColumnForm.reset();\r\n  taskColumnForm.style.display = \"none\";\r\n\r\n  \r\n  //writes task column object to local storage\r\n  let taskColumnObject = {\r\n    \"id\": taskcolumn.id,\r\n    \"columnName\": taskcolumn.columnName,\r\n    \"columnColor\": taskcolumn.columnColor\r\n  }\r\n\r\n  let taskColumns;\r\n\r\n  if(localStorage.getItem(\"taskColumns\") == null){\r\n    taskColumns = [];\r\n  }\r\n  else{\r\n    taskColumns = localStorage.getItem(\"taskColumns\");\r\n    taskColumns = JSON.parse(taskColumns);\r\n  }\r\n\r\n  let existingTaskColumn = taskColumns.find(function(taskcolumns){\r\n    return taskcolumns.id === taskcolumn.id;\r\n  })\r\n\r\n  if(!existingTaskColumn){\r\n    taskColumns.push(taskColumnObject);\r\n    let taskColumnJSON = JSON.stringify(taskColumns);\r\n    localStorage.setItem(\"taskColumns\", taskColumnJSON);\r\n  }\r\n\r\n\r\n  addTaskButton.addEventListener(\"click\", function(event){\r\n    event.preventDefault();\r\n    tasklist = tasks;\r\n    showAddTaskForm();\r\n  })\r\n\r\n\r\n  taskOutButton.addEventListener(\"click\", function(event){\r\n    event.preventDefault();\r\n    taskColumn.remove();\r\n    localStorage.removeItem(taskColumns);\r\n  })\r\n  \r\n  //puts task column on page in front of the add task column button\r\n  //taskContent.insertBefore(taskColumn, addTaskColumnButton);\r\n\r\n  taskColumnList.append(taskColumn);\r\n}\r\n\r\n//checks if localStorage has something inside\r\n\r\n  /*\r\nif (localStorage.length != 0){\r\n\r\n  //goes through each item in localStorage\r\n  for (let i = 0; i < localStorage.length; i++){\r\n    let keyName = localStorage.key(0);\r\n    let keyValue = localStorage.getItem(keyName);\r\n\r\n    console.log(keyValue);\r\n\r\n    //checks if keyName is taskColumns\r\n    if (keyName == \"taskColumns\"){\r\n      \r\n    }\r\n  }\r\n}\r\n*/\r\n\r\n/*function showLocalColumns(){\r\n  //grabs the key of localStorage item\r\n  let keyName = localStorage.key(0);\r\n  let keyValue = localStorage.getItem(keyName);\r\n  let currentLength = keyValue.length;\r\n  for (let i = 0; i < currentLength; i++){\r\n  \r\n\r\n    if (keyName == \"taskColumns\"){\r\n      let ColumnKey = keyValue[0].columnName;\r\n      let ColumnValue = keyValue[0].columnColor;\r\n    \r\n      addTaskColumn(ColumnKey, ColumnValue);\r\n    }\r\n    //checks if item in local storage has start \"taskColumn\" and creates the column if it does\r\n    \r\n\r\n    //checks if item in local storage has start \"taskList\" and creates the tasklist if it does\r\n    //if keyName == \"tasks\"{\r\n    //  let TaskKey = taskColumnArray[i].id;\r\n    //  let TaskValue = taskColumnArray[i].columnName;\r\n  \r\n    //  addTaskColumn(ColumnKey, ColumnValue);\r\n    //}\r\n  }\r\n}*/"],"names":["$127b68ff48610c0b$var$toggler","document","querySelector","$127b68ff48610c0b$var$menu","addEventListener","querySelectorAll","length","$3049795ed6568a49$var$music","getElementById","$3049795ed6568a49$var$playButton","$3049795ed6568a49$var$pauseButton","$3049795ed6568a49$var$playhead","$3049795ed6568a49$var$timeline","$3049795ed6568a49$var$timer","$3049795ed6568a49$var$duration","duration","$3049795ed6568a49$var$volumeSlider","style","display","playPercent","currentTime","width","offsetWidth","secondsIn","Math","floor","minutesIn","innerHTML","String","padStart","onclick","play","pause","e","volume","currentTarget","value","$c0b4664e380dbbbe$var$taskForm","$c0b4664e380dbbbe$var$taskColumnForm","$c0b4664e380dbbbe$var$taskColumnList","$c0b4664e380dbbbe$var$tasklist","$c0b4664e380dbbbe$var$taskNameInput","$c0b4664e380dbbbe$var$taskDueInput","$c0b4664e380dbbbe$var$taskCompInput","$c0b4664e380dbbbe$var$taskPriorityInput","$c0b4664e380dbbbe$var$taskListArray","$c0b4664e380dbbbe$var$taskColumnArray","$c0b4664e380dbbbe$var$showAddTaskForm","event","preventDefault","taskName","dueDate","estimatedTime","priorityRating","completionStatus","dateCreated","Date","getFullYear","task","id","now","push","task1","taskCard","createElement","setAttribute","classList","add","taskCardTitle","taskCardHeader","appendChild","taskCardInfo","priorityColor","priorityText","substring","toUpperCase","insertAdjacentText","totalMinutes","hours","minutes","taskCardIcons","delButton","delButtonImg","src","alt","compNoButton","compNoButtonImg","compYesButton","compYesButtonImg","reset","tasks","taskObject","localStorage","getItem","JSON","parse","existingTask","find","taskJSON","stringify","setItem","remove","removeItem","$c0b4664e380dbbbe$var$addTask","options","selectedIndex","columnName","columnColor","taskcolumn","taskColumn","minHeight","backgroundColor","taskColumnHead","taskOutButton","taskOutImg","addTaskButton","addTaskButtonIcon","taskColumns","taskColumnObject","taskcolumns","taskColumnJSON","$c0b4664e380dbbbe$var$renderTaskColumn","$c0b4664e380dbbbe$var$addTaskColumn","taskColumnName","colorpicker"],"version":3,"file":"index.997fe140.js.map"}