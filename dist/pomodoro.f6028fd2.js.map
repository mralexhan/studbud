{"mappings":"AACA,MAAMA,EAAUC,SAASC,cAAc,gBACjCC,EAAOF,SAASC,cAAc,SASlCF,EAAAI,iBAAA,SAAA,kECNaH,SAASI,iBAAiB,SAASC,OAAlD,IAIIC,EAAQN,SAASO,eAAe,SAChCC,EAAaR,SAASO,eAAe,QACrCE,EAAcT,SAASO,eAAe,SACtCG,EAAWV,SAASO,eAAe,WACnCI,EAAWX,SAASO,eAAe,UACnCK,EAAQZ,SAASO,eAAe,SAChCM,EAAWP,EAAMQ,SACjBC,EAAef,SAASO,eAAe,UAC5BP,SAASO,eAAe,YACxBP,SAASO,eAAe,YC4GvC,SAASS,EAAeC,EAAUC,GAEhClB,SAASO,eAAe,WAAWY,MAAMC,QAAU,OACnDpB,SAASO,eAAe,aAAaY,MAAMC,QAAU,OACrDpB,SAASO,eAAe,cAAcY,MAAMC,QAAU,QACtDpB,SAASO,eAAe,aAAaY,MAAMC,QAAU,OAErD,IAAIC,EAAuC,KAAlB,GAATJ,EAAeC,GAG3BI,EAAgBC,aAMpB,WACEF,GAAkB,IAClB,IAAIG,EAAUC,KAAKC,MAAOL,EAAQ,IAAM,IACpCM,EAAWN,EAAQ,IAAM,GAC7BO,EAAWC,UAAYC,OAAON,GAASO,SAAS,EAAG,KAAO,IAAMD,OAAOH,GAASI,SAAS,EAAG,KAG7E,GAAXV,IACFW,cAAcV,GAEdM,EAAWC,UAAYC,OAAOb,GAAUc,SAAS,EAAG,KAAO,IAAMD,OAAOZ,GAAUa,SAAS,EAAG,QAhBvD,KAC3CE,QAAQC,IAAIZ,GAEZ,IAAIM,EAAa5B,SAASO,eAAe,cDxH3CE,EAAYU,MAAMC,QAAU,OAG5Bd,EAAMH,iBAAiB,cAGvB,WAGC,IAAIgC,EAAe7B,EAAM8B,YAAcvB,EAAY,IAGnDH,EAASS,MAAMkB,MAAwB,IAAdF,EAAsBxB,EAAS2B,YAAe,KAGvE,IAAIC,EAAYd,KAAKC,MAAMpB,EAAM8B,YAAY,IACxCI,EAAYf,KAAKC,MAAMpB,EAAM8B,YAAY,IAG9CxB,EAAMiB,UAAYC,OAAOU,GAAWT,SAAS,EAAG,KAAO,IAAMD,OAAOS,GAAWR,SAAS,EAAG,QAhB3C,GAsBjDvB,EAAWiC,QAAU,WACpBnC,EAAMoC,OACNlC,EAAWW,MAAMC,QAAU,OAC3BuB,MAAMxB,MAAMC,QAAU,WAIvBX,EAAYgC,QAAU,WACrBnC,EAAMqC,QACNnC,EAAWW,MAAMC,QAAU,UAC3BuB,MAAMxB,MAAMC,QAAU,QAIvBd,EAAMH,iBAAiB,kBAAkB,WACxCU,EAAWP,EAAMQ,YACf,GAIHC,EAAaZ,iBAAiB,UAAU,SAASyC,GAC/CtC,EAAMuC,OAASD,EAAEE,cAAcC,MAAM,OC3DvC/C,SAASO,eAAe,aAAaJ,iBAAiB,SAEtD,WAEE,IAAI6C,EAAUC,SAASjD,SAASO,eAAe,WAAWwC,OACtDG,EAAUD,SAASjD,SAASO,eAAe,WAAWwC,OACtD9B,EAAWgC,SAASjD,SAASO,eAAe,YAAYwC,OACxD7B,EAAW+B,SAASjD,SAASO,eAAe,YAAYwC,OACxDI,EAAUF,SAASjD,SAASO,eAAe,WAAWwC,OACtDK,EAAUH,SAASjD,SAASO,eAAe,WAAWwC,OAGtDM,EAAyC,KAAjB,GAARL,EAAcE,GAC9BI,EAA4C,KAAlB,GAATrC,EAAeC,GAChCqC,EAAyC,KAAjB,GAARJ,EAAcC,GAGlCpD,SAASO,eAAe,aAAasB,UAAYC,OAAOkB,GAASjB,SAAS,EAAG,KAAO,IAAMD,OAAOoB,GAASnB,SAAS,EAAG,KACtH/B,SAASO,eAAe,cAAcsB,UAAYC,OAAOb,GAAUc,SAAS,EAAG,KAAO,IAAMD,OAAOZ,GAAUa,SAAS,EAAG,KACzH/B,SAASO,eAAe,aAAasB,UAAYC,OAAOqB,GAASpB,SAAS,EAAG,KAAO,IAAMD,OAAOsB,GAASrB,SAAS,EAAG,KAItH,IAAIyB,EAAW,EAGfxD,SAASO,eAAe,YAAYJ,iBAAiB,QAASsD,GAC9DzD,SAASO,eAAe,aAAaJ,iBAAiB,QAASsD,GAC/DzD,SAASO,eAAe,YAAYJ,iBAAiB,QAASsD,GAG9D,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAGrBC,YAAW,WACTC,EAAcZ,EAASE,KAAWM,GAGpCA,GAAYH,EAGZM,YAAW,WACT3C,EAAeC,EAAUC,KAAYsC,GAGvCA,GAAYF,EAgBd,SAASG,IACPzD,SAASO,eAAe,WAAWY,MAAMC,QAAU,QACnDpB,SAASO,eAAe,aAAaY,MAAMC,QAAU,OACrDpB,SAASO,eAAe,cAAcY,MAAMC,QAAU,OACtDpB,SAASO,eAAe,aAAaY,MAAMC,QAAU,OAGrDpB,SAASO,eAAe,WAAWsD,QAGnC,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAOA,IACzB9B,cAAc8B,GAMlB,SAASF,EAAcG,EAASC,GAG9BhE,SAASO,eAAe,WAAWY,MAAMC,QAAU,OACnDpB,SAASO,eAAe,aAAaY,MAAMC,QAAU,QACrDpB,SAASO,eAAe,cAAcY,MAAMC,QAAU,OACtDpB,SAASO,eAAe,aAAaY,MAAMC,QAAU,OAGrD,IAAIC,EAAqC,KAAjB,GAAR0C,EAAcC,GAG1BC,EAAe1C,aAMnB,WAEEF,GAAkB,IAClB,IAAIG,EAAUC,KAAKC,MAAOL,EAAQ,IAAM,IACpCM,EAAWN,EAAQ,IAAM,GAG7B6C,EAAUrC,UAAYC,OAAON,GAASO,SAAS,EAAG,KAAO,IAAMD,OAAOH,GAASI,SAAS,EAAG,KAG5E,GAAXV,IACFW,cAAciC,GAEdC,EAAUrC,UAAYC,OAAOiC,GAAShC,SAAS,EAAG,KAAO,IAAMD,OAAOkC,GAASjC,SAAS,EAAG,QAnBrD,KAC1CE,QAAQC,IAAI+B,GAEZ,IAAIC,EAAYlE,SAASO,eAAe,aA3C1CoD,YAAW,YAuGb,SAAuBR,EAASC,GAE9BpD,SAASO,eAAe,WAAWY,MAAMC,QAAU,OACnDpB,SAASO,eAAe,aAAaY,MAAMC,QAAU,OACrDpB,SAASO,eAAe,cAAcY,MAAMC,QAAU,OACtDpB,SAASO,eAAe,aAAaY,MAAMC,QAAU,QAErD,IAAIC,EAAqC,KAAjB,GAAR8B,EAAcC,GAG1Be,EAAe5C,YAAY6C,EAAW,KAC1CnC,QAAQC,IAAIiC,GAEZ,IAAIE,EAAYrE,SAASO,eAAe,aAGxC,SAAS6D,IACP/C,GAAkB,IAClB,IAAIG,EAAUC,KAAKC,MAAOL,EAAQ,IAAM,IACpCM,EAAWN,EAAQ,IAAM,GAC7BgD,EAAUxC,UAAYC,OAAON,GAASO,SAAS,EAAG,KAAO,IAAMD,OAAOH,GAASI,SAAS,EAAG,KAG5E,GAAXV,IACFW,cAAcmC,GAEdE,EAAUxC,UAAYC,OAAOqB,GAASpB,SAAS,EAAG,KAAO,IAAMD,OAAOsB,GAASrB,SAAS,EAAG,OAhI7FuC,CAAcnB,EAASC,KAAWI,GAGpCA,GAAYD,EAGZI,WAAWF,EAAWD","sources":["public/components/navmenu.js","public/components/musicplayer.js","public/pomodoro.js"],"sourcesContent":["/*javascript for the nav bar to be able to activate. Code from https://codepen.io/robdongas/pen/MWvKMRp*/\r\nconst toggler = document.querySelector('.menu-toggle');\r\nconst menu = document.querySelector('.menu');\r\n\r\n/*\r\n * Toggles on and off the 'active' class on the menu\r\n * and the toggler button.\r\n */\r\ntoggler.addEventListener('click', () => {\r\n  toggler.classList.toggle('active');\r\n  menu.classList.toggle('active');\r\n})","/*javascript for music player*/\r\n\r\n/*code modified from https://codepen.io/ozzie/pen/YPOBEJ*/\r\n\r\n//counts number of songs on the page\r\nvar numSongs = document.querySelectorAll(\"audio\").length;\r\n\r\nvar songIndex = 1;\r\n\r\nvar music = document.getElementById(\"song\" + songIndex);\r\nvar playButton = document.getElementById(\"play\");\r\nvar pauseButton = document.getElementById(\"pause\");\r\nvar playhead = document.getElementById(\"elapsed\");\r\nvar timeline = document.getElementById(\"slider\");\r\nvar timer = document.getElementById(\"timer\");\r\nvar duration = music.duration;\r\nvar volumeSlider = document.getElementById(\"volume\");\r\nvar prevSong = document.getElementById(\"prevSong\");\r\nvar nextSong = document.getElementById(\"nextSong\");\r\npauseButton.style.display = \"none\";\r\n\r\n//runs the timeupdate function whenever the music is updated\r\nmusic.addEventListener(\"timeupdate\", timeUpdate, false);\r\n\r\n//updates the timer and timeline when music is playinh\r\nfunction timeUpdate() {\r\n\r\n  //grabs percentage of song that has been played\r\n\tvar playPercent = (music.currentTime / duration) * 100;\r\n\r\n  //sets the width of the line that shows how much has been played based on percentage\r\n\tplayhead.style.width = ((playPercent * 0.01) * timeline.offsetWidth) + \"px\";\r\n\r\n  //checks how many minutes and seconds have been played\r\n\tvar secondsIn = Math.floor(music.currentTime%60);\r\n  var minutesIn = Math.floor(music.currentTime/60);\r\n\r\n  //updates the little timer underneath the bar based on how much of the song has been played\r\n\ttimer.innerHTML = String(minutesIn).padStart(2, \"0\") + \":\" + String(secondsIn).padStart(2, \"0\");\r\n\r\n  \r\n}\r\n\r\n//hides play button and shows pause button when play button is clicked\r\nplayButton.onclick = function() {\r\n\tmusic.play();\r\n\tplayButton.style.display = \"none\";\r\n\tpause.style.display = \"initial\";\r\n}\r\n\r\n//hides pause button and shows play button when pause button is clicked\r\npauseButton.onclick = function() {\r\n\tmusic.pause();\r\n\tplayButton.style.display = \"initial\";\r\n\tpause.style.display = \"none\";\r\n}\r\n\r\n\r\nmusic.addEventListener(\"canplaythrough\", function () {\r\n\tduration = music.duration;\r\n}, false);\r\n\r\n\r\n//volume slider javascript. ccode from https://stackoverflow.com/questions/62160275/js-audio-volume-slider\r\nvolumeSlider.addEventListener(\"change\", function(e){\r\n  music.volume = e.currentTarget.value/100;\r\n})","import \"./components/navmenu.js\";\r\nimport \"./components/musicplayer.js\";\r\n\r\n//start of pomodoro js\r\n\r\n//gathers data from form and starts timer with that information when user clicks on start button\r\ndocument.getElementById(\"startPomo\").addEventListener(\"click\", determineTimes);\r\n\r\nfunction determineTimes(){\r\n  //grabs values from form\r\n  let PomoMin = parseInt(document.getElementById(\"pomoMin\").value);\r\n  let PomoSec = parseInt(document.getElementById(\"pomoSec\").value);\r\n  let ShortMin = parseInt(document.getElementById(\"shortMin\").value);\r\n  let ShortSec = parseInt(document.getElementById(\"shortSec\").value);\r\n  let LongMin = parseInt(document.getElementById(\"longMin\").value);\r\n  let LongSec = parseInt(document.getElementById(\"longSec\").value);\r\n  \r\n  //checks how many milliseconds need to go down\r\n  let pomoCurrent = ((PomoMin*60) + PomoSec) * 1000;\r\n  let shortCurrent = ((ShortMin*60) + ShortSec) * 1000;\r\n  let longCurrent = ((LongMin*60) + LongSec) * 1000;\r\n\r\n  //sets initial text for each timer\r\n  document.getElementById(\"pomoCount\").innerHTML = String(PomoMin).padStart(2, \"0\") + \":\" + String(PomoSec).padStart(2, \"0\");\r\n  document.getElementById(\"shortCount\").innerHTML = String(ShortMin).padStart(2, \"0\") + \":\" + String(ShortSec).padStart(2, \"0\");\r\n  document.getElementById(\"longCount\").innerHTML = String(LongMin).padStart(2, \"0\") + \":\" + String(LongSec).padStart(2, \"0\");\r\n  \r\n\r\n  //creates a waitTime variable that judges when certain things run. This is required because javascript seems to run everything in a function all at once, and we don't want that. To circumvent that, you manually add a wait time so things occur after a specfic time.\r\n  let waitTime = 0;\r\n\r\n  //adds event listener to each stop button in each pomodoro timer\r\n  document.getElementById(\"pomoStop\").addEventListener(\"click\", resetPomo);\r\n  document.getElementById(\"shortStop\").addEventListener(\"click\", resetPomo);\r\n  document.getElementById(\"longStop\").addEventListener(\"click\", resetPomo);\r\n  \r\n  //runs functions for each individual countdown timer in accordance to pomodoro timer rules\r\n  for (let i = 0; i < 4; i++){\r\n\r\n    //makes it so pomoCountdown runs after a certian amount of time has passed\r\n    setTimeout(function(){\r\n      pomoCountdown(PomoMin, PomoSec)}, waitTime);\r\n  \r\n    //adds length of time in pomodoro to wait time.\r\n    waitTime += pomoCurrent;\r\n\r\n    //runs short break countdown timer after pomodoro countdown is finished\r\n    setTimeout(function(){\r\n      shortCountdown(ShortMin, ShortSec)}, waitTime);\r\n\r\n    //adds length of time in short break to wait time\r\n    waitTime += shortCurrent;\r\n    \r\n  }\r\n\r\n  //runs long break countdown timer after pomodoro countdown and short break countdown have both run 4 times (in accordance to the pomodoro rules -> set by above for loop)\r\n  setTimeout(function(){\r\n    longCountdown(LongMin, LongSec)}, waitTime);\r\n\r\n  //adds length of time in long break to wait time\r\n  waitTime += longCurrent;\r\n\r\n  //resets timer to original form after long break is over\r\n  setTimeout(resetPomo, waitTime);\r\n\r\n  \r\n  //function that resets the pomodoro timer to the original form state\r\n  function resetPomo(){\r\n    document.getElementById(\"bigPomo\").style.display = \"block\";\r\n    document.getElementById(\"pomoSmall\").style.display = \"none\";\r\n    document.getElementById(\"shortSmall\").style.display = \"none\";\r\n    document.getElementById(\"longSmall\").style.display = \"none\";\r\n\r\n    //resets the form\r\n    document.getElementById(\"bigPomo\").reset();\r\n\r\n    //clears all possible time intervals\r\n    for (let i = 0; i < 10000; i++){\r\n      clearInterval(i);\r\n    }\r\n  }\r\n  \r\n  \r\n  //function how counting down the pomodoro work time\r\n  function pomoCountdown(PomoMin, PomoSec){\r\n  \r\n    //makes it so only the current timer block is showing\r\n    document.getElementById(\"bigPomo\").style.display = \"none\";\r\n    document.getElementById(\"pomoSmall\").style.display = \"block\";\r\n    document.getElementById(\"shortSmall\").style.display = \"none\";\r\n    document.getElementById(\"longSmall\").style.display = \"none\";\r\n    \r\n    \r\n    let current = ((PomoMin*60) + PomoSec) * 1000;\r\n    \r\n    //removes one second from current every second  \r\n    let pomoInterval = setInterval(countdown, 1000);\r\n    console.log(pomoInterval);\r\n    \r\n    let PomoCount = document.getElementById(\"pomoCount\");\r\n\r\n    //countdown function that removes a second from the timer and shows the remaining time\r\n    function countdown(){\r\n      \r\n      current = current-1000;\r\n      let minLeft = Math.floor((current/1000)/60);\r\n      let secLeft = (current/1000)%60;\r\n\r\n      //sets the text in the box to be the remaining time. Also pads front with 0.\r\n      PomoCount.innerHTML = String(minLeft).padStart(2, \"0\") + \":\" + String(secLeft).padStart(2, \"0\");\r\n  \r\n      //resets the countdown timer and text when current reaches zero\r\n      if (current == 0){\r\n        clearInterval(pomoInterval);\r\n\r\n        PomoCount.innerHTML = String(PomoMin).padStart(2, \"0\") + \":\" + String(PomoSec).padStart(2, \"0\");\r\n      }\r\n    }\r\n    \r\n  }\r\n  \r\n\r\n}\r\n\r\n\r\n//function how counting down the short breaks\r\nfunction shortCountdown(ShortMin, ShortSec){\r\n  //makes it so only the current timer block is showing\r\n  document.getElementById(\"bigPomo\").style.display = \"none\";\r\n  document.getElementById(\"pomoSmall\").style.display = \"none\";\r\n  document.getElementById(\"shortSmall\").style.display = \"block\";\r\n  document.getElementById(\"longSmall\").style.display = \"none\";\r\n  \r\n  let current = ((ShortMin*60) + ShortSec) * 1000;\r\n  \r\n  //removes one second from current every second  \r\n  let shortInterval = setInterval(countdown, 1000);\r\n  console.log(shortInterval);\r\n  \r\n  let ShortCount = document.getElementById(\"shortCount\");\r\n\r\n  //countdown function that removes a second from the timer and shows the remaining time\r\n  function countdown(){\r\n    current = current-1000;\r\n    let minLeft = Math.floor((current/1000)/60);\r\n    let secLeft = (current/1000)%60;\r\n    ShortCount.innerHTML = String(minLeft).padStart(2, \"0\") + \":\" + String(secLeft).padStart(2, \"0\");\r\n\r\n     //resets the countdown timer and text when current reaches zero\r\n    if (current == 0){\r\n      clearInterval(shortInterval);\r\n\r\n      ShortCount.innerHTML = String(ShortMin).padStart(2, \"0\") + \":\" + String(ShortSec).padStart(2, \"0\");\r\n    }\r\n  }\r\n}\r\n\r\n\r\n//function how counting down the long breaks\r\nfunction longCountdown(LongMin, LongSec){\r\n  //makes it so only the current timer block is showing\r\n  document.getElementById(\"bigPomo\").style.display = \"none\";\r\n  document.getElementById(\"pomoSmall\").style.display = \"none\";\r\n  document.getElementById(\"shortSmall\").style.display = \"none\";\r\n  document.getElementById(\"longSmall\").style.display = \"block\";\r\n\r\n  let current = ((LongMin*60) + LongSec) * 1000;\r\n  \r\n  //removes one second from current every second  \r\n  let longInterval = setInterval(countdown, 1000);\r\n  console.log(longInterval);\r\n  \r\n  let LongCount = document.getElementById(\"longCount\");\r\n\r\n  //countdown function that removes a second from the timer and shows the remaining time\r\n  function countdown(){\r\n    current = current-1000;\r\n    let minLeft = Math.floor((current/1000)/60);\r\n    let secLeft = (current/1000)%60;\r\n    LongCount.innerHTML = String(minLeft).padStart(2, \"0\") + \":\" + String(secLeft).padStart(2, \"0\");\r\n\r\n     //resets the countdown timer and text when current reaches zero\r\n    if (current == 0){\r\n      clearInterval(longInterval);\r\n\r\n      LongCount.innerHTML = String(LongMin).padStart(2, \"0\") + \":\" + String(LongSec).padStart(2, \"0\");\r\n    }\r\n  }\r\n  \r\n}"],"names":["$127b68ff48610c0b$var$toggler","document","querySelector","$127b68ff48610c0b$var$menu","addEventListener","querySelectorAll","length","$3049795ed6568a49$var$music","getElementById","$3049795ed6568a49$var$playButton","$3049795ed6568a49$var$pauseButton","$3049795ed6568a49$var$playhead","$3049795ed6568a49$var$timeline","$3049795ed6568a49$var$timer","$3049795ed6568a49$var$duration","duration","$3049795ed6568a49$var$volumeSlider","$304513ab2e4564a6$var$shortCountdown","ShortMin","ShortSec","style","display","current","shortInterval","setInterval","minLeft","Math","floor","secLeft","ShortCount","innerHTML","String","padStart","clearInterval","console","log","playPercent","currentTime","width","offsetWidth","secondsIn","minutesIn","onclick","play","pause","e","volume","currentTarget","value","PomoMin1","parseInt","PomoSec1","LongMin","LongSec","pomoCurrent","shortCurrent","longCurrent","waitTime","resetPomo","i1","setTimeout","pomoCountdown","reset","i","PomoMin","PomoSec","pomoInterval","PomoCount","longInterval","countdown","LongCount","$304513ab2e4564a6$var$longCountdown"],"version":3,"file":"pomodoro.f6028fd2.js.map"}