{"mappings":"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","sources":["public/tasklist.js"],"sourcesContent":["//import \"./components/navmenu\";\r\n\r\n/*javascript for the nav bar to be able to activate. Code from https://codepen.io/robdongas/pen/MWvKMRp*/\r\nconst toggler = document.querySelector('.menu-toggle');\r\nconst menu = document.querySelector('.menu');\r\n\r\n/*\r\n * Toggles on and off the 'active' class on the menu\r\n * and the toggler button.\r\n */\r\ntoggler.addEventListener('click', () => {\r\n  toggler.classList.toggle('active');\r\n  menu.classList.toggle('active');\r\n})\r\n\r\n//Task List js starts here\r\nconst taskForm = document.querySelector(\".newTaskForm\");\r\nconst taskColumnForm = document.querySelector(\".newTaskColumnForm\");\r\n\r\nvar taskColumnList = document.querySelector(\".taskContent > ul\")\r\nvar tasklist = document.querySelector(\".taskColumn > ul\");\r\n\r\nvar taskNameInput = document.getElementById(\"taskName\");\r\nvar taskDueInput = document.getElementById(\"taskDue\");\r\nvar taskCompInput = document.getElementById(\"taskComp\");\r\nvar taskPriorityInput = document.getElementById(\"taskPriority\");\r\nvar addTaskColumnButton = document.getElementById(\"taskColumnAdd\");\r\n\r\nvar taskListArray = [];\r\nvar taskColumnArray = [];\r\n\r\n//showLocalColumns(); //shows locally stored information on page\r\n\r\n//creates a task column on page at the beginning if taskColumnList doesn't have child nodes\r\n/*if (taskColumnList.childNodes.length == 3){\r\n  addTaskColumn(\"To Do\", \"#ED9D28\");\r\n}*/\r\n\r\n\r\ndocument.getElementById(\"taskColumnAdd\").addEventListener(\"click\", showAddTaskColumnForm);\r\ndocument.getElementById(\"newTaskColumnOut\").addEventListener(\"click\", closeAddTaskColumnForm);\r\ndocument.getElementById(\"taskAdd\").addEventListener(\"click\", showAddTaskForm);\r\ndocument.getElementById(\"newTaskOut\").addEventListener(\"click\", closeAddTaskForm);\r\n\r\n\r\n\r\n//grabs the information from the new task form when user clicks submit button\r\ntaskForm.addEventListener(\"submit\", function(event) {\r\n  event.preventDefault();\r\n  let task = taskNameInput.value;\r\n  let dueDate = taskDueInput.value;\r\n  let estimatedTime = taskCompInput.value;\r\n  let priorityRating = taskPriorityInput.options[taskPriorityInput.selectedIndex].value;\r\n  /* if (task) {\r\n    addTask(task, dueDate, estimatedTime, priorityRating, false);\r\n  } */\r\n  addTask(task, dueDate, estimatedTime, priorityRating, false);\r\n})\r\n\r\ntaskColumnForm.addEventListener(\"submit\", function(event){\r\n  event.preventDefault();\r\n  let columnName = taskColumnName.value;\r\n  let columnColor = colorpicker.value;\r\n  addTaskColumn(columnName, columnColor);\r\n})\r\n\r\nfunction showAddTaskForm() {\r\n  document.querySelector(\".newTaskForm\").style.display = \"initial\";\r\n}\r\n\r\nfunction closeAddTaskForm() {\r\n  document.querySelector(\".newTaskForm\").style.display = \"none\";\r\n}\r\n\r\nfunction showAddTaskColumnForm() {\r\n  document.querySelector(\".newTaskColumnForm\").style.display = \"initial\";\r\n}\r\n\r\nfunction closeAddTaskColumnForm() {\r\n  document.querySelector(\".newTaskColumnForm\").style.display = \"none\";\r\n}\r\n\r\nfunction addTask(taskName, dueDate, estimatedTime, priorityRating, completionStatus) {\r\n  let d = new Date();\r\n  let dateCreated = d.getFullYear();\r\n  let task = {\r\n    id: Date.now(),\r\n    taskName,\r\n    dueDate,\r\n    dateCreated,\r\n    estimatedTime,\r\n    priorityRating,\r\n    completionStatus\r\n  };\r\n  taskListArray.push(task);\r\n  renderTask(task);\r\n}\r\n\r\nfunction addTaskColumn(columnName, columnColor){\r\n  let taskcolumn = {\r\n    id: Date.now(),\r\n    columnName,\r\n    columnColor\r\n  }\r\n  taskColumnArray.push(taskcolumn);\r\n  renderTaskColumn(taskcolumn);\r\n}\r\n\r\nfunction renderTask(task) {\r\n  //create HTML elements\r\n\r\n  //creates task card div\r\n  let taskCard = document.createElement(\"div\"); \r\n  taskCard.setAttribute(\"data-id\", task.id);\r\n  taskCard.classList.add(\"taskCard\");\r\n\r\n  //creates task card title div\r\n  let taskCardTitle = document.createElement(\"div\");\r\n  taskCardTitle.classList.add(\"taskCardTitle\")\r\n  //creates task card header (h3)\r\n  let taskCardHeader = document.createElement(\"h3\");\r\n  taskCardHeader.innerHTML = task.taskName;\r\n  taskCardTitle.appendChild(taskCardHeader); //adds h3 to taskCardTitle div\r\n  taskCard.appendChild(taskCardTitle); //adds taskCardTitle to taskCard div\r\n\r\n  //creates taskCardInfo div\r\n  let taskCardInfo = document.createElement(\"div\");\r\n  taskCardInfo.classList.add(\"taskCardInfo\");\r\n  //creates text for the different task information\r\n  let dueDate = document.createElement(\"p\");\r\n  dueDate.innerHTML = \"Due Date: \" + task.dueDate;\r\n  let priorityRating = document.createElement(\"p\");\r\n\r\n  //javascript for priority\r\n  let priorityColor = document.createElement(\"span\");\r\n  let priorityText = task.priorityRating.substring(0,1).toUpperCase() + task.priorityRating.substring(1); //capitalizes the priority text\r\n  priorityColor.insertAdjacentText(\"afterbegin\", priorityText); //adds text to the span element\r\n  //changes priority text color based on what value it is\r\n  if (task.priorityRating == \"low\"){\r\n    priorityColor.classList.add(\"pLow\");\r\n  }\r\n  if (task.priorityRating == \"medium\"){\r\n    priorityColor.classList.add(\"pMedium\");\r\n  }\r\n  if (task.priorityRating == \"high\"){\r\n    priorityColor.classList.add(\"pHigh\");\r\n  }\r\n  priorityRating.innerHTML = \"Priority Rating: \";\r\n  priorityRating.appendChild(priorityColor);\r\n\r\n  //estimated time javascript\r\n  let estimatedTime = document.createElement(\"p\");\r\n  let totalMinutes = task.estimatedTime;\r\n  let hours = Math.floor(totalMinutes / 60);\r\n  let minutes = totalMinutes % 60;\r\n  estimatedTime.innerHTML = \"Est. Time to Complete: \" + hours + \"H\" + minutes +\"M\";\r\n  \r\n  taskCardInfo.appendChild(dueDate);\r\n  taskCardInfo.appendChild(priorityRating);\r\n  taskCardInfo.appendChild(estimatedTime);\r\n  taskCard.appendChild(taskCardInfo);\r\n\r\n  //creates the icon section of the task card\r\n  let taskCardIcons = document.createElement(\"div\");\r\n  taskCardIcons.classList.add(\"taskCardIcons\");\r\n  //creates a delete button for the task\r\n  let delButton = document.createElement(\"button\");\r\n  let delButtonImg = document.createElement(\"img\"); //creates image in document\r\n  delButtonImg.classList.add(\"icon\"); //adds class \"icon\" to image\r\n  delButtonImg.src = \"images/Trashcan.png\"; //sets image src\r\n  delButtonImg.alt = \"Delete Task Card Icon\";\r\n  delButton.appendChild(delButtonImg); //puts image under the html button container\r\n  taskCardIcons.appendChild(delButton);\r\n  //creates completion buttons for the task\r\n  let compNoButton = document.createElement(\"button\");\r\n  let compNoButtonImg = document.createElement(\"img\");\r\n  compNoButtonImg.classList.add(\"icon\");\r\n  compNoButtonImg.src = \"images/CompNo.png\";\r\n  compNoButtonImg.alt = \"Task Not Completed Icon\";\r\n  compNoButton.appendChild(compNoButtonImg);\r\n  let compYesButton = document.createElement(\"button\");\r\n  let compYesButtonImg = document.createElement(\"img\");\r\n  compYesButtonImg.classList.add(\"icon\");\r\n  compYesButtonImg.src = \"images/CompYes.png\";\r\n  compYesButtonImg.alt = \"Task Completed Icon\";\r\n  compYesButton.appendChild(compYesButtonImg);\r\n  //adds buttons to icon secton div\r\n  taskCardIcons.appendChild(compNoButton);\r\n  taskCardIcons.appendChild(compYesButton);\r\n  taskCard.appendChild(taskCardIcons);\r\n\r\n  //makes compYesButton invisible by default\r\n  compYesButton.style.display = \"none\";\r\n  //Puts the tasklist into the unlisted list in the taskColumn\r\n  tasklist.appendChild(taskCard);\r\n\r\n\r\n  //clears the input form\r\n  taskForm.reset();\r\n  //makes the form disappear from the screen\r\n  taskForm.style.display = \"none\";\r\n\r\n  //writes task object to local storage\r\n  let taskObject = {\r\n    \"id\": task.id,\r\n    \"taskName\": task.taskName,\r\n    \"dueDate\": task.dueDate,\r\n    \"dateCreated\": task.dateCreated,\r\n    \"estimatedTime\": task.estimatedTime,\r\n    \"priorityRating\": task.priorityRating,\r\n    \"completionStatus\": task.completionStatus\r\n  }\r\n\r\n  let tasks;\r\n\r\n  if(localStorage.getItem(\"tasks\") == null){\r\n    tasks = [];\r\n  }\r\n  else{\r\n    tasks = localStorage.getItem(\"tasks\");\r\n    tasks = JSON.parse(tasks);\r\n  }\r\n\r\n  let existingTask = tasks.find(function(task){\r\n    return task.id === tasks.id;\r\n  })\r\n\r\n  if(!existingTask){\r\n    tasks.push(taskObject);\r\n    let taskJSON = JSON.stringify(tasks);\r\n    localStorage.setItem(\"tasks\", taskJSON);\r\n  }\r\n\r\n  \r\n  \r\n  //removes the task when delButton is pressed\r\n  delButton.addEventListener(\"click\", function(event){\r\n    event.preventDefault();\r\n    taskCard.remove();\r\n    localStorage.removeItem(tasks)\r\n  })\r\n\r\n\r\n  /*toggles between compNoButton and compYesButton when you click them*/\r\n  compNoButton.addEventListener(\"click\", function(event){\r\n    event.preventDefault();\r\n    compYesButton.style.display = \"initial\";\r\n    compNoButton.style.display = \"none\";\r\n    task.completionStatus = true;\r\n  })\r\n\r\n  compYesButton.addEventListener(\"click\", function(event){\r\n    event.preventDefault();\r\n    compYesButton.style.display = \"none\";\r\n    compNoButton.style.display = \"initial\";\r\n    task.completionStatus = false;\r\n  })\r\n  \r\n}\r\n\r\nfunction renderTaskColumn(taskcolumn) {\r\n  //creates task column and h2 \r\n  let taskColumn = document.createElement(\"div\");\r\n  taskColumn.classList.add(\"taskColumn\");\r\n  taskColumn.style.minHeight = \"20vh\"; //styles minHeight here so it won't affect other columns\r\n  taskColumn.style.backgroundColor = taskcolumn.columnColor;\r\n  let taskColumnHead = document.createElement(\"h2\");\r\n  taskColumnHead.innerHTML = taskcolumn.columnName;\r\n  taskColumn.appendChild(taskColumnHead);\r\n\r\n  //creates delete task column button\r\n  let taskOutButton = document.createElement(\"button\");\r\n  taskOutButton.classList.add(\"taskOut\");\r\n  let taskOutImg = document.createElement(\"img\");\r\n  taskOutImg.classList.add(\"icon\");\r\n  taskOutImg.src = \"images/Remove.png\";\r\n  taskOutImg.alt = \"Remove Task Column Icon\";\r\n  taskOutButton.appendChild(taskOutImg);\r\n  taskColumn.appendChild(taskOutButton);\r\n\r\n  //creates empty list where task cards go\r\n  let tasks = document.createElement(\"ul\");\r\n  taskColumn.appendChild(tasks);\r\n\r\n  //creates add task button\r\n  let addTaskButton = document.createElement(\"button\");\r\n  addTaskButton.classList.add(\"taskAdd\");\r\n  let addTaskButtonIcon = document.createElement(\"img\");\r\n  addTaskButtonIcon.classList.add(\"icon\");\r\n  addTaskButtonIcon.src = \"images/Add.png\";\r\n  addTaskButtonIcon.alt = \"Add Task Button Icon\"\r\n  addTaskButton.appendChild(addTaskButtonIcon);\r\n  taskColumn.appendChild(addTaskButton);\r\n\r\n  //makes taskColumnForm reset and disappear\r\n  taskColumnForm.reset();\r\n  taskColumnForm.style.display = \"none\";\r\n\r\n  \r\n  //writes task column object to local storage\r\n  let taskColumnObject = {\r\n    \"id\": taskcolumn.id,\r\n    \"columnName\": taskcolumn.columnName,\r\n    \"columnColor\": taskcolumn.columnColor\r\n  }\r\n\r\n  let taskColumns;\r\n\r\n  if(localStorage.getItem(\"taskColumns\") == null){\r\n    taskColumns = [];\r\n  }\r\n  else{\r\n    taskColumns = localStorage.getItem(\"taskColumns\");\r\n    taskColumns = JSON.parse(taskColumns);\r\n  }\r\n\r\n  let existingTaskColumn = taskColumns.find(function(taskcolumns){\r\n    return taskcolumns.id === taskcolumn.id;\r\n  })\r\n\r\n  if(!existingTaskColumn){\r\n    taskColumns.push(taskColumnObject);\r\n    let taskColumnJSON = JSON.stringify(taskColumns);\r\n    localStorage.setItem(\"taskColumns\", taskColumnJSON);\r\n  }\r\n\r\n\r\n  addTaskButton.addEventListener(\"click\", function(event){\r\n    event.preventDefault();\r\n    tasklist = tasks;\r\n    showAddTaskForm();\r\n  })\r\n\r\n\r\n  taskOutButton.addEventListener(\"click\", function(event){\r\n    event.preventDefault();\r\n    taskColumn.remove();\r\n    localStorage.removeItem(taskColumns);\r\n  })\r\n  \r\n  //puts task column on page in front of the add task column button\r\n  //taskContent.insertBefore(taskColumn, addTaskColumnButton);\r\n\r\n  taskColumnList.append(taskColumn);\r\n}\r\n\r\n//checks if localStorage has something inside\r\n\r\n  /*\r\nif (localStorage.length != 0){\r\n\r\n  //goes through each item in localStorage\r\n  for (let i = 0; i < localStorage.length; i++){\r\n    let keyName = localStorage.key(0);\r\n    let keyValue = localStorage.getItem(keyName);\r\n\r\n    console.log(keyValue);\r\n\r\n    //checks if keyName is taskColumns\r\n    if (keyName == \"taskColumns\"){\r\n      \r\n    }\r\n  }\r\n}\r\n*/\r\n\r\n/*function showLocalColumns(){\r\n  //grabs the key of localStorage item\r\n  let keyName = localStorage.key(0);\r\n  let keyValue = localStorage.getItem(keyName);\r\n  let currentLength = keyValue.length;\r\n  for (let i = 0; i < currentLength; i++){\r\n  \r\n\r\n    if (keyName == \"taskColumns\"){\r\n      let ColumnKey = keyValue[0].columnName;\r\n      let ColumnValue = keyValue[0].columnColor;\r\n    \r\n      addTaskColumn(ColumnKey, ColumnValue);\r\n    }\r\n    //checks if item in local storage has start \"taskColumn\" and creates the column if it does\r\n    \r\n\r\n    //checks if item in local storage has start \"taskList\" and creates the tasklist if it does\r\n    //if keyName == \"tasks\"{\r\n    //  let TaskKey = taskColumnArray[i].id;\r\n    //  let TaskValue = taskColumnArray[i].columnName;\r\n  \r\n    //  addTaskColumn(ColumnKey, ColumnValue);\r\n    //}\r\n  }\r\n}*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*javascript for music player*/\r\n\r\n/*code from https://codepen.io/ozzie/pen/YPOBEJ*/\r\nvar music = document.getElementById(\"music\");\r\nvar playButton = document.getElementById(\"play\");\r\nvar pauseButton = document.getElementById(\"pause\");\r\nvar playhead = document.getElementById(\"elapsed\");\r\nvar timeline = document.getElementById(\"slider\");\r\nvar timer = document.getElementById(\"timer\");\r\nvar duration;\r\npauseButton.style.display = \"none\";\r\n\r\nvar timelineWidth = timeline.offsetWidth - playhead.offsetWidth;\r\nmusic.addEventListener(\"timeupdate\", timeUpdate, false);\r\n\r\nfunction timeUpdate() {\r\n\tvar playPercent = timelineWidth * (music.currentTime / duration);\r\n\tplayhead.style.width = playPercent + \"px\";\r\n\r\n\tvar secondsIn = Math.floor(((music.currentTime / duration) / 3.5) * 100);\r\n\tif (secondsIn <= 9) {\r\n\t\ttimer.innerHTML = \"0:0\" + secondsIn;\r\n\t} else {\r\n\t\ttimer.innerHTML = \"0:\" + secondsIn;\r\n\t}\r\n}\r\n\r\nplayButton.onclick = function() {\r\n\tmusic.play();\r\n\tplayButton.style.display = \"none\";\r\n\tpause.style.display = \"initial\";\r\n}\r\n\r\npauseButton.onclick = function() {\r\n\tmusic.pause();\r\n\tplayButton.style.display = \"initial\";\r\n\tpause.style.display = \"none\";\r\n}\r\n\r\nmusic.addEventListener(\"canplaythrough\", function () {\r\n\tduration = music.duration;\r\n}, false);\r\n\r\n\r\n/*javascript for music player*/\r\n\r\n/*code modified from https://codepen.io/ozzie/pen/YPOBEJ*/\r\n\r\n//counts number of songs on the page\r\nvar numSongs = document.querySelectorAll(\"audio\").length;\r\n\r\nvar songIndex = 1;\r\n\r\nvar music = document.getElementById(\"song\" + songIndex);\r\nvar playButton = document.getElementById(\"play\");\r\nvar pauseButton = document.getElementById(\"pause\");\r\nvar playhead = document.getElementById(\"elapsed\");\r\nvar timeline = document.getElementById(\"slider\");\r\nvar timer = document.getElementById(\"timer\");\r\nvar duration = music.duration;\r\nvar volumeSlider = document.getElementById(\"volume\");\r\nvar prevSong = document.getElementById(\"prevSong\");\r\nvar nextSong = document.getElementById(\"nextSong\");\r\npauseButton.style.display = \"none\";\r\n\r\n//runs the timeupdate function whenever the music is updated\r\nmusic.addEventListener(\"timeupdate\", timeUpdate, false);\r\n\r\n//updates the timer and timeline when music is playinh\r\nfunction timeUpdate() {\r\n\r\n  //grabs percentage of song that has been played\r\n\tvar playPercent = (music.currentTime / duration) * 100;\r\n\r\n  //sets the width of the line that shows how much has been played based on percentage\r\n\tplayhead.style.width = ((playPercent * 0.01) * timeline.offsetWidth) + \"px\";\r\n\r\n  //checks how many minutes and seconds have been played\r\n\tvar secondsIn = Math.floor(music.currentTime%60);\r\n  var minutesIn = Math.floor(music.currentTime/60);\r\n\r\n  //updates the little timer underneath the bar based on how much of the song has been played\r\n\ttimer.innerHTML = String(minutesIn).padStart(2, \"0\") + \":\" + String(secondsIn).padStart(2, \"0\");\r\n\r\n  \r\n}\r\n\r\n//hides play button and shows pause button when play button is clicked\r\nplayButton.onclick = function() {\r\n\tmusic.play();\r\n\tplayButton.style.display = \"none\";\r\n\tpause.style.display = \"initial\";\r\n}\r\n\r\n//hides pause button and shows play button when pause button is clicked\r\npauseButton.onclick = function() {\r\n\tmusic.pause();\r\n\tplayButton.style.display = \"initial\";\r\n\tpause.style.display = \"none\";\r\n}\r\n\r\n\r\nmusic.addEventListener(\"canplaythrough\", function () {\r\n\tduration = music.duration;\r\n}, false);\r\n\r\n\r\n//volume slider javascript. ccode from https://stackoverflow.com/questions/62160275/js-audio-volume-slider\r\nvolumeSlider.addEventListener(\"change\", function(e){\r\n  music.volume = e.currentTarget.value/100;\r\n})"],"names":["toggler","document","querySelector","menu","addEventListener","classList","toggle","taskForm","taskColumnForm","taskColumnList","tasklist","taskNameInput","getElementById","taskDueInput","taskCompInput","taskPriorityInput","addTaskColumnButton","taskListArray","taskColumnArray","showAddTaskForm","style","display","closeAddTaskForm","showAddTaskColumnForm","closeAddTaskColumnForm","addTask","taskName","dueDate","estimatedTime","priorityRating","completionStatus","dateCreated","Date","getFullYear","task","id","now","push","addTaskColumn","columnName","columnColor","taskcolumn","renderTaskColumn","renderTask","task1","taskCard","createElement","setAttribute","add","taskCardTitle","taskCardHeader","innerHTML","appendChild","taskCardInfo","priorityColor","priorityText","substring","toUpperCase","insertAdjacentText","totalMinutes","hours","Math","floor","minutes","taskCardIcons","delButton","delButtonImg","src","alt","compNoButton","compNoButtonImg","compYesButton","compYesButtonImg","reset","tasks","taskObject","localStorage","getItem","JSON","parse","find","taskJSON","stringify","setItem","event","preventDefault","remove","removeItem","taskColumn","minHeight","backgroundColor","taskColumnHead","taskOutButton","taskOutImg","addTaskButton","addTaskButtonIcon","taskColumns","taskcolumns","taskColumnObject","taskColumnJSON","append","value","options","selectedIndex","taskColumnName","colorpicker","music","playButton","pauseButton","playhead","timeline","timer","timelineWidth","offsetWidth","timeUpdate","playPercent","currentTime","duration","width","secondsIn","onclick","play","pause"],"version":3,"file":"index.16640875.js.map"}