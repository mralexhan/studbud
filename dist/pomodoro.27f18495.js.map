{"mappings":"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","sources":["public/components/navmenu.js","public/components/musicplayer.js","public/pomodoro.js"],"sourcesContent":["/*javascript for the nav bar to be able to activate. Code from https://codepen.io/robdongas/pen/MWvKMRp*/\r\nconst toggler = document.querySelector('.menu-toggle');\r\nconst menu = document.querySelector('.menu');\r\n\r\n/*\r\n * Toggles on and off the 'active' class on the menu\r\n * and the toggler button.\r\n */\r\ntoggler.addEventListener('click', () => {\r\n  toggler.classList.toggle('active');\r\n  menu.classList.toggle('active');\r\n})","/*javascript for music player*/\r\n\r\n/*code modified and built off from https://codepen.io/ozzie/pen/YPOBEJ*/\r\n\r\n//counts number of songs on the page\r\nvar numSongs = document.querySelectorAll(\"audio\").length;\r\n\r\nvar songIndex = 1;\r\n\r\n//grabs a variety of elements from the document to use later\r\nvar music = document.getElementById(\"song\" + songIndex);\r\nvar playButton = document.getElementById(\"play\");\r\nvar pauseButton = document.getElementById(\"pause\");\r\nvar playhead = document.getElementById(\"elapsed\");\r\nvar timeline = document.getElementById(\"slider\");\r\nvar timer = document.getElementById(\"timer\");\r\nvar duration = music.duration;\r\nvar volumeSlider = document.getElementById(\"volume\");\r\nvar prevSong = document.getElementById(\"prevSong\");\r\nvar nextSong = document.getElementById(\"nextSong\");\r\nvar playlistButton = document.querySelector(\".playlistButton\");\r\nvar songList = document.querySelector(\".songList\");\r\nvar currentSongName = document.getElementById(\"currentSongName\");\r\nvar currentArtist = document.getElementById(\"currentArtist\");\r\n\r\n//sets pause button to hidden by default\r\npauseButton.style.display = \"none\";\r\n\r\n//runs the timeupdate function whenever the music is updated\r\nmusic.addEventListener(\"timeupdate\", timeUpdate, false);\r\n//plays next song when next song button is pressed\r\nnextSong.addEventListener(\"click\", playNext); \r\n//plays previous song when previous song button is pressed\r\nprevSong.addEventListener(\"click\", playPrev);\r\n\r\n//updates the timer and timeline when music is playinh\r\nfunction timeUpdate() {\r\n\r\n  //grabs percentage of song that has been played\r\n\tvar playPercent = (music.currentTime / duration) * 100;\r\n\r\n  //sets the width of the line that shows how much has been played based on percentage\r\n\tplayhead.style.width = ((playPercent * 0.01) * timeline.offsetWidth) + \"px\";\r\n\r\n  //checks how many minutes and seconds have been played\r\n\tvar secondsIn = Math.floor(music.currentTime%60);\r\n  var minutesIn = Math.floor(music.currentTime/60);\r\n\r\n  //updates the little timer underneath the bar based on how much of the song has been played\r\n\ttimer.innerHTML = String(minutesIn).padStart(2, \"0\") + \":\" + String(secondsIn).padStart(2, \"0\");\r\n\r\n\r\n}\r\n\r\n//hides play button and shows pause button when play button is clicked\r\nplayButton.onclick = function() {\r\n\tmusic.play();\r\n\tplayButton.style.display = \"none\";\r\n\tpause.style.display = \"initial\";\r\n}\r\n\r\n//hides pause button and shows play button when pause button is clicked\r\npauseButton.onclick = function() {\r\n\tmusic.pause();\r\n\tplayButton.style.display = \"initial\";\r\n\tpause.style.display = \"none\";\r\n}\r\n\r\n\r\n//function that plays next song\r\nfunction playNext(){\r\n  playButton.style.display = \"none\"; //hides play button\r\n  pause.style.display = \"initial\"; //shows pause button\r\n  music.pause(); //stops the current song\r\n  music.currentTime = 0; //resets the song back to beginning\r\n  songIndex += 1; //increments the song index so it will play the next song\r\n  //if songIndex goes beyond the current number of songs, it goes back to the first one\r\n  if (songIndex > numSongs){\r\n    songIndex = 1;\r\n  }\r\n  music = document.getElementById(\"song\" + songIndex); //changes current playing song to the next song\r\n\r\n  //changes the displayed song name and artist\r\n  var songInfo = music.parentNode.children[1].children;\r\n  currentSongName.innerHTML = songInfo[0].innerHTML\r\n  currentArtist.innerHTMl = songInfo[1].innerHTMl\r\n  music.play(); //plays the new song\r\n  music.addEventListener(\"timeupdate\", timeUpdate, false);\r\n}\r\n\r\n//function that plays previous song\r\nfunction playPrev(){\r\n  playButton.style.display = \"none\"; //hides play button\r\n  pause.style.display = \"initial\"; //shows pause button\r\n  music.pause(); //stops the current song\r\n  music.currentTime = 0; //resets the song back to beginning\r\n  songIndex -= 1; //increments the song index so it will play the next song\r\n  //if songIndex goes beyond the current number of songs, it goes back to the first one\r\n  if (songIndex < 1){\r\n    songIndex = numSongs;\r\n  }\r\n  music = document.getElementById(\"song\" + songIndex); //changes current playing song to the next song\r\n\r\n  //changes the displayed song name and artist\r\n  var songInfo = music.parentNode.children[1].children;\r\n  currentSongName.innerHTML = songInfo[0].innerHTML\r\n  currentArtist.innerHTMl = songInfo[1].innerHTMl\r\n  music.play(); //plays the new song\r\n  music.addEventListener(\"timeupdate\", timeUpdate, false);\r\n}\r\n\r\n\r\n//makes it so every element with class \"songs\" will behave the same way when clicked. Code from https://www.codegrepper.com/code-examples/javascript/js+add+event+listener+to+all+elements+with+class\r\ndocument.querySelectorAll(\".songs\").forEach(item =>{\r\n  item.addEventListener(\"click\", event =>{\r\n    playButton.style.display = \"none\"; //hides play button\r\n  \tpause.style.display = \"initial\"; //shows pause button\r\n    music.pause(); //stops the current song\r\n    music.currentTime = 0; //resets the song back to beginning\r\n\r\n    let songId = item.children[2].id;\r\n    songIndex = parseInt(songId.substring(songId.length-1)); //changes songIndex to the index of song in playlist\r\n    music = document.getElementById(\"song\" + songIndex); //changes current playing song to the next song\r\n  \r\n    //changes the displayed song name and artist\r\n    var songInfo = music.parentNode.children[1].children;\r\n    currentSongName.innerHTML = songInfo[0].innerHTML\r\n    currentArtist.innerHTMl = songInfo[1].innerHTMl\r\n    music.play(); //plays the new song\r\n    music.addEventListener(\"timeupdate\", timeUpdate, false);\r\n  })\r\n})\r\n\r\n\r\n\r\nmusic.addEventListener(\"canplaythrough\", function () {\r\n\tduration = music.duration;\r\n}, false);\r\n\r\n\r\n//volume slider javascript. ccode from https://stackoverflow.com/questions/62160275/js-audio-volume-slider\r\nvolumeSlider.addEventListener(\"change\", function(e){\r\n  music.volume = e.currentTarget.value/100;\r\n})\r\n\r\n\r\n//Makes the songlist show up and disappear when playlist button is clicked\r\nvar songListOut = false;\r\nplaylistButton.addEventListener(\"click\", function(){\r\n  songList.classList.toggle(\"active\");\r\n});\r\n","import \"./components/navmenu.js\";\r\nimport \"./components/musicplayer.js\";\r\n\r\n//start of pomodoro js\r\n\r\n//gathers data from form and starts timer with that information when user clicks on start button\r\ndocument.getElementById(\"startPomo\").addEventListener(\"click\", determineTimes);\r\n\r\nfunction determineTimes(){\r\n  //grabs values from form\r\n  let PomoMin = parseInt(document.getElementById(\"pomoMin\").value);\r\n  let PomoSec = parseInt(document.getElementById(\"pomoSec\").value);\r\n  let ShortMin = parseInt(document.getElementById(\"shortMin\").value);\r\n  let ShortSec = parseInt(document.getElementById(\"shortSec\").value);\r\n  let LongMin = parseInt(document.getElementById(\"longMin\").value);\r\n  let LongSec = parseInt(document.getElementById(\"longSec\").value);\r\n  \r\n  //checks how many milliseconds need to go down\r\n  let pomoCurrent = ((PomoMin*60) + PomoSec) * 1000;\r\n  let shortCurrent = ((ShortMin*60) + ShortSec) * 1000;\r\n  let longCurrent = ((LongMin*60) + LongSec) * 1000;\r\n\r\n  //sets initial text for each timer\r\n  document.getElementById(\"pomoCount\").innerHTML = String(PomoMin).padStart(2, \"0\") + \":\" + String(PomoSec).padStart(2, \"0\");\r\n  document.getElementById(\"shortCount\").innerHTML = String(ShortMin).padStart(2, \"0\") + \":\" + String(ShortSec).padStart(2, \"0\");\r\n  document.getElementById(\"longCount\").innerHTML = String(LongMin).padStart(2, \"0\") + \":\" + String(LongSec).padStart(2, \"0\");\r\n  \r\n\r\n  //creates a waitTime variable that judges when certain things run. This is required because javascript seems to run everything in a function all at once, and we don't want that. To circumvent that, you manually add a wait time so things occur after a specfic time.\r\n  let waitTime = 0;\r\n\r\n  //adds event listener to each stop button in each pomodoro timer\r\n  document.getElementById(\"pomoStop\").addEventListener(\"click\", resetPomo);\r\n  document.getElementById(\"shortStop\").addEventListener(\"click\", resetPomo);\r\n  document.getElementById(\"longStop\").addEventListener(\"click\", resetPomo);\r\n  \r\n  //runs functions for each individual countdown timer in accordance to pomodoro timer rules\r\n  for (let i = 0; i < 4; i++){\r\n\r\n    //makes it so pomoCountdown runs after a certian amount of time has passed\r\n    setTimeout(function(){\r\n      pomoCountdown(PomoMin, PomoSec)}, waitTime);\r\n  \r\n    //adds length of time in pomodoro to wait time.\r\n    waitTime += pomoCurrent;\r\n\r\n    //runs short break countdown timer after pomodoro countdown is finished\r\n    setTimeout(function(){\r\n      shortCountdown(ShortMin, ShortSec)}, waitTime);\r\n\r\n    //adds length of time in short break to wait time\r\n    waitTime += shortCurrent;\r\n    \r\n  }\r\n\r\n  //runs long break countdown timer after pomodoro countdown and short break countdown have both run 4 times (in accordance to the pomodoro rules -> set by above for loop)\r\n  setTimeout(function(){\r\n    longCountdown(LongMin, LongSec)}, waitTime);\r\n\r\n  //adds length of time in long break to wait time\r\n  waitTime += longCurrent;\r\n\r\n  //resets timer to original form after long break is over\r\n  setTimeout(resetPomo, waitTime);\r\n\r\n  \r\n  //function that resets the pomodoro timer to the original form state\r\n  function resetPomo(){\r\n    document.getElementById(\"bigPomo\").style.display = \"block\";\r\n    document.getElementById(\"pomoSmall\").style.display = \"none\";\r\n    document.getElementById(\"shortSmall\").style.display = \"none\";\r\n    document.getElementById(\"longSmall\").style.display = \"none\";\r\n\r\n    //resets the form\r\n    document.getElementById(\"bigPomo\").reset();\r\n\r\n    //clears all possible time intervals\r\n    for (let i = 0; i < 10000; i++){\r\n      clearInterval(i);\r\n    }\r\n  }\r\n  \r\n  \r\n  //function how counting down the pomodoro work time\r\n  function pomoCountdown(PomoMin, PomoSec){\r\n  \r\n    //makes it so only the current timer block is showing\r\n    document.getElementById(\"bigPomo\").style.display = \"none\";\r\n    document.getElementById(\"pomoSmall\").style.display = \"block\";\r\n    document.getElementById(\"shortSmall\").style.display = \"none\";\r\n    document.getElementById(\"longSmall\").style.display = \"none\";\r\n    \r\n    \r\n    let current = ((PomoMin*60) + PomoSec) * 1000;\r\n    \r\n    //removes one second from current every second  \r\n    let pomoInterval = setInterval(countdown, 1000);\r\n    console.log(pomoInterval);\r\n    \r\n    let PomoCount = document.getElementById(\"pomoCount\");\r\n\r\n    //countdown function that removes a second from the timer and shows the remaining time\r\n    function countdown(){\r\n      \r\n      current = current-1000;\r\n      let minLeft = Math.floor((current/1000)/60);\r\n      let secLeft = (current/1000)%60;\r\n\r\n      //sets the text in the box to be the remaining time. Also pads front with 0.\r\n      PomoCount.innerHTML = String(minLeft).padStart(2, \"0\") + \":\" + String(secLeft).padStart(2, \"0\");\r\n  \r\n      //resets the countdown timer and text when current reaches zero\r\n      if (current == 0){\r\n        clearInterval(pomoInterval);\r\n\r\n        PomoCount.innerHTML = String(PomoMin).padStart(2, \"0\") + \":\" + String(PomoSec).padStart(2, \"0\");\r\n      }\r\n    }\r\n    \r\n  }\r\n  \r\n\r\n}\r\n\r\n\r\n//function how counting down the short breaks\r\nfunction shortCountdown(ShortMin, ShortSec){\r\n  //makes it so only the current timer block is showing\r\n  document.getElementById(\"bigPomo\").style.display = \"none\";\r\n  document.getElementById(\"pomoSmall\").style.display = \"none\";\r\n  document.getElementById(\"shortSmall\").style.display = \"block\";\r\n  document.getElementById(\"longSmall\").style.display = \"none\";\r\n  \r\n  let current = ((ShortMin*60) + ShortSec) * 1000;\r\n  \r\n  //removes one second from current every second  \r\n  let shortInterval = setInterval(countdown, 1000);\r\n  console.log(shortInterval);\r\n  \r\n  let ShortCount = document.getElementById(\"shortCount\");\r\n\r\n  //countdown function that removes a second from the timer and shows the remaining time\r\n  function countdown(){\r\n    current = current-1000;\r\n    let minLeft = Math.floor((current/1000)/60);\r\n    let secLeft = (current/1000)%60;\r\n    ShortCount.innerHTML = String(minLeft).padStart(2, \"0\") + \":\" + String(secLeft).padStart(2, \"0\");\r\n\r\n     //resets the countdown timer and text when current reaches zero\r\n    if (current == 0){\r\n      clearInterval(shortInterval);\r\n\r\n      ShortCount.innerHTML = String(ShortMin).padStart(2, \"0\") + \":\" + String(ShortSec).padStart(2, \"0\");\r\n    }\r\n  }\r\n}\r\n\r\n\r\n//function how counting down the long breaks\r\nfunction longCountdown(LongMin, LongSec){\r\n  //makes it so only the current timer block is showing\r\n  document.getElementById(\"bigPomo\").style.display = \"none\";\r\n  document.getElementById(\"pomoSmall\").style.display = \"none\";\r\n  document.getElementById(\"shortSmall\").style.display = \"none\";\r\n  document.getElementById(\"longSmall\").style.display = \"block\";\r\n\r\n  let current = ((LongMin*60) + LongSec) * 1000;\r\n  \r\n  //removes one second from current every second  \r\n  let longInterval = setInterval(countdown, 1000);\r\n  console.log(longInterval);\r\n  \r\n  let LongCount = document.getElementById(\"longCount\");\r\n\r\n  //countdown function that removes a second from the timer and shows the remaining time\r\n  function countdown(){\r\n    current = current-1000;\r\n    let minLeft = Math.floor((current/1000)/60);\r\n    let secLeft = (current/1000)%60;\r\n    LongCount.innerHTML = String(minLeft).padStart(2, \"0\") + \":\" + String(secLeft).padStart(2, \"0\");\r\n\r\n     //resets the countdown timer and text when current reaches zero\r\n    if (current == 0){\r\n      clearInterval(longInterval);\r\n\r\n      LongCount.innerHTML = String(LongMin).padStart(2, \"0\") + \":\" + String(LongSec).padStart(2, \"0\");\r\n    }\r\n  }\r\n  \r\n}"],"names":["$127b68ff48610c0b$var$toggler","document","querySelector","$127b68ff48610c0b$var$menu","addEventListener","$3049795ed6568a49$var$numSongs","querySelectorAll","length","$3049795ed6568a49$var$songIndex","$3049795ed6568a49$var$music","getElementById","$3049795ed6568a49$var$playButton","$3049795ed6568a49$var$pauseButton","$3049795ed6568a49$var$playhead","$3049795ed6568a49$var$timeline","$3049795ed6568a49$var$timer","$3049795ed6568a49$var$duration","duration","$3049795ed6568a49$var$volumeSlider","$3049795ed6568a49$var$prevSong","$3049795ed6568a49$var$nextSong","$3049795ed6568a49$var$playlistButton","$3049795ed6568a49$var$songList","$3049795ed6568a49$var$currentSongName","$3049795ed6568a49$var$currentArtist","$3049795ed6568a49$var$timeUpdate","playPercent","currentTime","style","width","offsetWidth","secondsIn","Math","floor","minutesIn","innerHTML","String","padStart","display","pause","songInfo","parentNode","children","innerHTMl","play","onclick","forEach","item","event","songId","id","parseInt","substring","e","volume","currentTarget","value","$304513ab2e4564a6$var$shortCountdown","ShortMin","ShortSec","current","shortInterval","setInterval","minLeft","secLeft","ShortCount","clearInterval","console","log","classList","toggle","PomoMin1","PomoSec1","LongMin","LongSec","pomoCurrent","shortCurrent","longCurrent","waitTime","resetPomo","i1","setTimeout","pomoCountdown","reset","i","PomoMin","PomoSec","pomoInterval","PomoCount","longInterval","countdown","LongCount","$304513ab2e4564a6$var$longCountdown"],"version":3,"file":"pomodoro.27f18495.js.map"}